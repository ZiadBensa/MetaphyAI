generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text), '-', '') )"))
  email     String   @unique
  name      String?
  avatar    String?
  googleId  String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  documents Document[]
  chatSessions ChatSession[]
}

model Document {
  id             String   @id @default(dbgenerated("concat('doc_', replace(cast(gen_random_uuid() as text), '-', '') )"))
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  fileName       String
  mimeType       String
  driveFileId    String
  webViewLink    String?
  webContentLink String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ChatSession {
  id          String   @id @default(dbgenerated("concat('chat_', replace(cast(gen_random_uuid() as text), '-', '') )"))
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  pdfFileName String
  pdfText     String   @db.Text
  summary     String   // 6-word summary
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    ChatMessage[]
}

model ChatMessage {
  id           String      @id @default(dbgenerated("concat('msg_', replace(cast(gen_random_uuid() as text), '-', '') )"))
  session      ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId    String
  role         String      // "user" or "assistant"
  content      String      @db.Text
  timestamp    DateTime    @default(now())
}